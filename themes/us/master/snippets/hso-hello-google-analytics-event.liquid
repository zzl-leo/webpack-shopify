
	<!-- HGA app content start -->
	{% assign hello_ga_template_name = template | split: '.' | first %}
  
	<script>
	 window.gtag = window.gtag || function(){};
	</script>
  
	 {%- comment -%}
		Collection Page Data Layer
	{%- endcomment -%}
  
	{% if hello_ga_template_name == 'collection' %}
		<script>
		(function(){
			window.ht_hga_collection_data = [];
					
			{% for product in collection.products %}
				(function(){
					let variantTitle = "";
					{% if product.selected_variant %}
						variantTitle = "{{product.selected_variant.title}}";
					{% else %}
						variantTitle = "{{product.variants[0].title}}";  
					{% endif %}
	
					const itemCategoryList = {};
					{% for ht_singleCollect in product.collections %}
						{% if forloop.index == 1 %}
							itemCategoryList['item_category'] = "{{ht_singleCollect.title}}";
						{% else %}
							itemCategoryList['item_category{{forloop.index}}'] = "{{ht_singleCollect.title}}";
						{% endif %}
						{% if forloop.index == 4 %}
							{% break %}
						{% endif %}         
					{% endfor %}
											 
					let itemCategories=[];
								   
					for(item in itemCategoryList){
					   itemCategories.push(itemCategoryList[item]);
					}
  
					itemCategories = itemCategories.join("/");
	
					window.ht_hga_collection_data.push(
					  {
						item_id: "{{product.id}}",
						item_name: "{{product.title | strip_newlines}}",
						currency: Shopify.currency.active || ShopifyAnalytics.meta.currency,
						item_brand: "{{product.vendor}}",
						item_category: itemCategories,
						item_variant: variantTitle,
						price: {{product.price | divided_by: 100.00}},
						handle: "{{product.handle}}"
					  }
					)
				})();
			{% endfor %}
	
		})();
		let renderProductHandlerDataHGA = [... new Set([...document.querySelectorAll('[href]')].filter(e=> JSON.stringify(e.href).includes('/products/')).map(e=> e.href.split('/products/')[e.href.split('/products/').length - 1]))];
	
		window.ht_hga_collection_data = window.ht_hga_collection_data || [];
		  
		let dataLayerItemsDataHGA = [];
	
		renderProductHandlerDataHGA.forEach(singleRenderProductHandler=> {
			for (let index = 0; index < window.ht_hga_collection_data.length; index++) {
				const singleCollectionProduct = window.ht_hga_collection_data[index];
			  
				
			  
				if(singleCollectionProduct.handle === singleRenderProductHandler){
					dataLayerItemsDataHGA.push(singleCollectionProduct);
					break;
				}
			}
		});
		  
		
		  
		const dataLayerItemsFilterDataHGA = dataLayerItemsDataHGA.map((e, i)=> {
			delete e.handle;
			return e;
		})
		
	   
		gtag('event', 'view_item_list', {
		  item_list_id: "{{collection.id}}",
		  item_list_name: "{{collection.title}}",
		  "items": dataLayerItemsFilterDataHGA
		});
		</script>
		
	{% endif %}
  
	{%- comment -%}
	  Product Page Data Layer
	{%- endcomment -%}
  
	{% if hello_ga_template_name == 'product' %}
  
	  <script>
		
		(function(){
			let variantTitle = "";
  
			{% if product.selected_variant %}
				  variantTitle = "{{product.selected_variant.title}}";
			{% else %}
				  variantTitle = "{{product.variants[0].title}}";  
			{% endif %}
  
			const itemCategoryList = {};
		  
			{% for ht_singleCollect in product.collections %}
		  
				{% if forloop.index == 1 %}
				  itemCategoryList['item_category'] = "{{ht_singleCollect.title}}";
				{% else %}
				  itemCategoryList['item_category{{forloop.index}}'] = "{{ht_singleCollect.title}}";
				{% endif %}
								   
				{% if forloop.index == 4 %}
					{% break %}
				{% endif %} 
								   
			{% endfor %}
								   
			let itemCategories=[];
								   
			for(item in itemCategoryList){
			   itemCategories.push(itemCategoryList[item]);
			}
		  
			itemCategories = itemCategories.join("/");
			  
  
			gtag('event', 'view_item', {
			  "items": [
				{
				  item_id: "{{product.id}}",
				  item_name: "{{product.title}}",
				  currency: Shopify.currency.active || ShopifyAnalytics.meta.currency,
				  item_brand: "{{product.vendor}}",
				  item_category: itemCategories,
				  item_variant: variantTitle,
				  price: {{product.price | divided_by: 100.00}}
				}
			  ]
			});
		
		
		})()
		
		
	  
	  </script>
  
	{% endif %}
  
	{%- comment -%}
		Add to cart or remove to cart
	{%- endcomment -%}
	<script>
	  function htHGACheckCart() {
		/**
		 *
		 * @param {Array} dataList
		 * @param {Object} singleData
		 */
		const isDataUseable = (dataList, checkData) => {
		  if (dataList.length === 0) return checkData;
	
		  for (let index = 0; index < dataList.length; index++) {
			const singleData = dataList[index];
			if (singleData.id === checkData.id) {
			  if (checkData.quantity > singleData.quantity) {
				const newData = {
				  ...checkData,
				  quantity: checkData.quantity - singleData.quantity,
				};
				return newData;
			  } else {
				return false;
			  }
			}
		  }
		  return checkData;
		};
	
		/**
		 *
		 * @param {Array} localStoreData
		 * @param {Array} newFetchData
		 */
		const checkAddToACart = (localStoreData, newFetchData) => {
		  return newFetchData
			.map((singleFetchData) =>
			  isDataUseable(localStoreData, singleFetchData)
			)
			.filter(Boolean);
		};
	
		/**
		 *
		 * @param {Array} localStoreData
		 * @param {Array} newFetchData
		 */
		const checkRemoveFromACart = (localStoreData, newFetchData) => {
		  return localStoreData
			.map((singleLocalStoreData) =>
			  isDataUseable(newFetchData, singleLocalStoreData)
			)
			.filter(Boolean);
		};
	
		const addToCartFire = (cartData) => {
		  const dataLayerItems = cartData.map((singleCartData, i) => {
			
			return {
			  item_id: singleCartData.id,
			  item_name: singleCartData.product_title,
			  currency: Shopify.currency.active || ShopifyAnalytics.meta.currency,
			  item_brand: singleCartData.vendor,
			  item_variant: singleCartData.variant_title,
			  quantity: singleCartData.quantity,
			  price: singleCartData.price / 100
			}
		  });
	
		  gtag('event', 'add_to_cart', {
			"items": dataLayerItems
		  });
		};
	
		const removeFromCartFire = (cartData) => {
		  const dataLayerItems = cartData.map((singleCartData, i) => {
			return {
			  item_id: singleCartData.id,
			  item_name: singleCartData.product_title,
			  currency: Shopify.currency.active || ShopifyAnalytics.meta.currency,
			  item_brand: singleCartData.vendor,
			  item_variant: singleCartData.variant_title,
			  quantity: singleCartData.quantity,
			  price: singleCartData.price / 100
			}
			
		  });
	
		  gtag('event', 'remove_from_cart', {
			"items": dataLayerItems
		  });
		};
	
		setInterval(function () {
		  fetch("/cart.js")
			.then((response) => response.json())
			.then((data) => {
			  const lsData =
				JSON.parse(localStorage.getItem("ht-hga-cart-data")) || [];
				
			  const fetchData = data.items;
			 
			  const addToCart = checkAddToACart(lsData, fetchData);
			  addToCart.length !== 0 && addToCartFire(addToCart);
  
			  const removeFromCart = checkRemoveFromACart(lsData, fetchData);
			  removeFromCart.length !== 0 && removeFromCartFire(removeFromCart);
		  
			  localStorage.setItem("ht-hga-cart-data", JSON.stringify(fetchData));
			});
		}, 1000);
	  }
	
	  htHGACheckCart();
	</script>


	{%- comment -%}
    	Begin checkout Checkout Event
 	{%- endcomment -%}
	<script>
	window.addEventListener("load", (event) => {
	(function () {
		function fireInitiateCheckout(catData) {
		gtag("event", "begin_checkout", {
			currency: catData.currency,
			value: catData.total_price / 100,
			items: catData.items.map((item, index) => ({
			item_id: item.variant_id,
			item_name: item.title,
			currency: catData.currency,
			index: index,
			item_variant: item.variant_title,
			price: item.price / 100,
			quantity: item.quantity,
			item_brand: item.vendor,
			})),
		});
		}

		function checkoutButtonClickHandler() {
		fetch("/cart.js")
			.then((response) => response.json())
			.then((data) => {
			fireInitiateCheckout(data);
			});
		}

		window.hso_checkoutButtonClickHandler = checkoutButtonClickHandler;

		function setCheckoutButtonEvent() {
		if (document.querySelectorAll("[name='checkout']").length !== 0) {
			document
			.querySelectorAll("[name='checkout']")
			.forEach((singleButton) => {
				singleButton.addEventListener("click", checkoutButtonClickHandler);
			});
		}
		if (document.querySelectorAll("[href='/checkout']").length !== 0) {
			document
			.querySelectorAll("[href='/checkout']")
			.forEach((singleButton) => {
				singleButton.addEventListener("click", checkoutButtonClickHandler);
			});
		}
		}

		setCheckoutButtonEvent();

		const targetNode = document.body;
		const config = { attributes: true, childList: true, subtree: true };
		const callback = function (mutationsList, observer) {
		setCheckoutButtonEvent();
		};

		const observer = new MutationObserver(callback);
		observer.observe(targetNode, config);
	})();
	});
</script>
  
  
	<!-- HGA app content end -->
	
	